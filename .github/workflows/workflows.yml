---
name: "CI build and test jobs"

on:
  pull_request:
    branches-ignore:
      - /doc\/.*/
  push:
    branches:
      - master
      - maint/*
    tags:
      - '*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Setup python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Add version to environment
        run: |
          python -c 'import fitlins; print(f"VERSION={fitlins.__version__}")' >> $GITHUB_ENV

      - name: Check version matches tag
        if: startsWith(github.ref, 'refs/tags/')
        run: test "$VERSION" = "${{ github.ref_name }}"

      - name: Build image and export
        timeout-minutes: 30
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            BUILD_DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
            VCS_REF="$(git rev-parse --short HEAD)"
            VERSION=${{ env.VERSION }}
          push: false
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          load: true

      - name: Verify executable can be run
        run: |
          docker images
          docker run --rm $IMAGE_NAME:latest --help

      - name: Check version
        run: |
          DOCKERVERSION=$(docker run --rm $IMAGE_NAME:latest --version \
                           | tail -n 1 | sed -e 's/.*fit/fit/' -e 's/[\r\n]//g')
          echo "$VERSION"
          echo "$DOCKERVERSION"
          test "$DOCKERVERSION" = "fitlins v$VERSION"

      - name: Export docker image to a tar file
        run: |
          docker save ${{ github.repository }} > /tmp/docker.tar
          ls -l /tmp/

      - name: Upload docker.tar as artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker
          path: /tmp/docker.tar

  cache_test_data:
    runs-on: ubuntu-latest
    steps:
      - name: "Make cachedir"
        run: |
          mkdir -p /tmp/.cache/data && \
          chmod 777 /tmp/.cache/data

      - name: Set git ID
        run: |
          git config --global user.name 'Fitlins GH-Action User' && \
          git config --global user.email 'shashankbansal56@gmail.com'

      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - name: Install dependencies
        shell: bash -l {0}
        run: |
          sudo apt-get update -y && sudo apt-get upgrade -y
          sudo apt-get install -y git-annex
          python -m pip install --upgrade pip
          pip install datalad==0.14.7

      - name: Datalad WTF
        run: |
         datalad wtf

      - name: Install cached data
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.cache/data
          key: ds003-v5-${{ github.ref_name }}-${{ github.sha }}
          restore-keys: |
            ds003-v5-${{ github.ref_name }}-
            ds003-v5-

      - name: "Install fMRIPrep derivatives of ds000003 and reference data"
        # if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd /tmp/.cache/data
          datalad install -r -s https://gin.g-node.org/markiewicz/fitlins-tests
          datalad update --merge -d fitlins-tests
          cd fitlins-tests
          datalad get inputs/ds000003-fmriprep/sub-0{1,2,3}/func/*_space-MNI152NLin2009cAsym_desc-*.nii.gz \
                      inputs/ds000003-fmriprep/sub-0{1,2,3}/func/*_desc-confounds_*.tsv \
                      inputs/ds000003-fmriprep/dataset_description.json \
                      inputs/ds000003-fmriprep/sub-*/*/*.json \
                      outputs
          datalad status

      - name: "Check installed derivatives data"
        run: |
          cd /tmp/.cache/data/fitlins-tests/
          git log --oneline --graph
          du -sh .


  run_pytest:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v1

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: docker
          path: /tmp

      - name: Load docker image
        run: |
          docker info
          set +o pipefail
          ls -l /tmp/docker.tar
          docker load --input /tmp/docker.tar
          docker images

      - name: Run pytest
        timeout-minutes: 120
        run: |
          mkdir -p /tmp/pytestcov
          chmod 777 /tmp/pytestcov
          docker run --rm \
              -v /tmp/pytestcov:/scratch \
              -e COVERAGE_FILE=/scratch/.coverage.pytest \
              --entrypoint="/neurodocker/startup.sh" \
              ${{ github.repository_owner }}/fitlins:latest \
              pytest --cov=fitlins --cov-report xml:/scratch/cov_pytest.xml \
               --cov-config /src/fitlins/docker/multiproc.coveragerc \
               --ignore-glob=/src/fitlins/fitlins/tests/* /src/fitlins

      - name: Submit pytest coverage
        uses: codecov/codecov-action@v2
        with:
          directory: /tmp/pytestcov
          env_vars: OS,PYTHON
          files: /tmp/pytestcov/cov_pytest.xml
          flags: pytest
          verbose: true

  test_ds003:
    needs: [build, cache_test_data]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test_name: ["afni_smooth", "nistats_smooth", "afni_blurto", "nistats_blurto"]
    steps:
      - uses: actions/checkout@v2

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v1

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: docker
          path: /tmp

      - name: Load docker image
        run: |
          docker info
          set +o pipefail
          ls -l /tmp/docker.tar
          docker load < /tmp/docker.tar
          docker images

      - name: Restore cached test data
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.cache/data
          key: ds003-v5-${{ github.ref_name }}-${{ github.sha }}

      - name: Run fitlins
        timeout-minutes: 240
        env:
          CONDA_PREFIX: /opt/miniconda-latest/envs/neuro
        run: |
          mkdir -p /tmp/ds003/work /tmp/ds003/derivatives
          chmod 777 /tmp/ds003/work /tmp/ds003/derivatives
          export CONDA_PREFIX=/opt/miniconda-latest/envs/neuro
          echo $CONDA_PREFIX
          docker run --rm -v /tmp/.cache/data/fitlins-tests:/data:ro \
                -v /tmp/ds003/derivatives:/out \
                -v /tmp/ds003/work:/scratch \
                -v $GITHUB_WORKSPACE:/src/fitlins \
                -e COVERAGE_FILE=/scratch/.coverage_${{ matrix.test_name }} \
                --entrypoint="/neurodocker/startup.sh" \
                ${{ github.repository }}:latest \
                pytest --cov=fitlins \
                --cov-config /src/fitlins/docker/multiproc.coveragerc \
                --cov-report xml:/scratch/.coverage_pytest_${{ matrix.test_name }}.xml \
                $CONDA_PREFIX/lib/python3.9/site-packages/fitlins/tests \
                --fitlins-path=$CONDA_PREFIX/bin/fitlins \
                --bids-dir=/data/inputs/ds000003 \
                --output-dir=/out \
                --derivatives=/data/inputs/ds000003-fmriprep \
                --model=/src/fitlins/examples/models/ds000003/models/model-001_smdl.json \
                --work-dir=/scratch \
                --test-name=${{ matrix.test_name }} \
                --database-path=/out/ds003_database \
                --reference-dir=/data/outputs/

      - name: Combine coverage and submit
        uses: codecov/codecov-action@v2
        with:
          files: /tmp/ds003/work/.coverage_pytest_${{ matrix.test_name }}.xml
          flags: ${{ matrix.test_name }}
          env_vars: GITHUB_JOB
          verbose: true

  deploy_docker:
    needs: [test_ds003]
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v1

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: docker
          path: /tmp

      - name: Load docker image
        run: |
          docker info
          set +o pipefail
          ls -l /tmp/docker.tar
          docker load < /tmp/docker.tar
          docker images

      - name: Set version/master tags
        run: |
          # GHCR
          docker tag $IMAGE_NAME $REGISTRY/$IMAGE_NAME:${{ github.ref_name }}
          # DockerHub
          docker tag $IMAGE_NAME $IMAGE_NAME:${{ github.ref_name }}

      - name: Check images
        run: docker images

      - name: Login to Github Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to GHCR
        timeout-minutes: 60
        run: docker push $REGISTRY/$IMAGE_NAME:${{ github.ref_name }}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Deploy to DockerHub
        timeout-minutes: 60
        run: docker push $IMAGE_NAME:${{ github.ref_name }}

      - name: Deploy ":latest" to DockerHub
        timeout-minutes: 10
        if: startsWith(github.ref, 'refs/tags/')
        run: docker push $IMAGE_NAME:latest
