---
name: "CI build and test jobs"

on:
  pull_request:
    branches-ignore:
      - /doc\/.*/
    tags:
      - /.*/
  push:
    branches-ignore:
      - /doc\/.*/
    tags:
      - /.*/

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Create version variable
        run: |
          export THISVERSION=$(python -c 'import fitlins; print(fitlins.__version__)' )
          echo "Building version $THISVERSION"

      - name: Build image and export
        timeout-minutes: 30
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            BUILD_DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
            VCS_REF="$(git rev-parse --short HEAD)"
            VERSION="0.9.1+59.gacefebe.dirty"
          push: false
          tags: shashankbansal56/fitlins:latest
          load: true
          # cache-from: type=registry,ref=shashankbansal56/fitlins:latest
          # cache-to: type=registry,ref=shashankbansal56/fitlins:latest,mode=max
          outputs: type=docker,dest=/tmp/docker.tar

      - name: Verify executable can be run
        run: |
          docker run --rm shashankbansal56/fitlins:latest --help

          # - name: Check version
          #   run: |
          #     THISVERSION=$( python -c 'import fitlins; print(fitlins.__version__)' )
          #     DOCKERVERSION=$(docker run --rm poldracklab/fitlins:latest --version \
          #                      | tail -n 1 | sed -e 's/.*fit/fit/' -e 's/[\r\n]//g')
          #     echo "$THISVERSION"
          #     echo "$DOCKERVERSION"
          #     test "$DOCKERVERSION" = "fitlins v$THISVERSION"

      - name: Upload docker.tar as artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker
          path: /tmp/docker.tar

  cache_test_data:
    runs-on: ubuntu-latest
    steps:
      - name: "Make cachedir"
        run: |
          mkdir -p /tmp/.cache/data && \
          chmod 777 /tmp/.cache/data

      - name: Set git ID
        run: |
          git config --global user.name 'Fitlins GH-Action User' && \
          git config --global user.email 'shashankbansal56@gmail.com'

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          sudo apt-get update -y && sudo apt-get upgrade -y
          sudo apt-get install -y git git-annex
          python -m pip install --upgrade pip
          pip install datalad

      - name: WTF!?
        run: |
         datalad wtf

      - name: "cached data"
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.cache/data
          key: ds003-v1-${{ runner.os }}-${{ github.job }}
          restore-keys: |
            ds003-v1-${{ runner.os }}-
            ds003-v1-
            ds003-

      - name: "Install fMRIPrep derivatives of ds000003 and reference data"
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd /tmp/.cache/data
          datalad install -r -s https://gin.g-node.org/shashankbansal56/fitlins_tests
          # datalad update --merge fitlins_tests
          cd fitlins_tests
          datalad get ds003/fmriprep/sub-0{1,2,3}/func/*_space-MNI152NLin2009cAsym_desc-*.nii.gz \
                                    ds003/fmriprep/sub-0{1,2,3}/func/*_desc-confounds_*.tsv \
                                    ds003/fmriprep/dataset_description.json \
                                    ds003/fmriprep/sub-*/*/*.json
          datalad get -r ds003/nistats_smooth/ ds003/afni_smooth/ ds003/afni_blurto/ ds003/nistats_blurto/

  build_docs:
    runs-on: ubuntu-latest
    steps:
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Check python version and upgrade pip
        run: |
          python --version
          python -m pip install -U pip setuptools

      - name: Install pandoc
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc

      - uses: actions/checkout@v2
      - name: Install fitlins
        run: |
          cd $GITHUB_WORKSPACE
          pip install ".[docs]"

      - name: Build docs
        run: |
          cd $GITHUB_WORKSPACE
          make html
          ls
          pwd

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          name: docs
          path: docs/_build/html

  run_pytest:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v1

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: docker
          path: /tmp

      - name: Load docker image
        run: |
          docker info
          set +o pipefail
          ls -l /tmp/docker.tar
          docker load --input /tmp/docker.tar
          docker images

      - name: Run pytest
        timeout-minutes: 120
        run: |
          mkdir -p /tmp/pytestcov
          chmod 777 /tmp/pytestcov
          docker run --rm \
              -v /tmp/pytestcov:/scratch \
              -e COVERAGE_FILE=/scratch/.coverage.pytest \
              --entrypoint="/neurodocker/startup.sh" \
              shashankbansal56/fitlins:latest \
              pytest --cov=fitlins --cov-report xml:/scratch/cov_pytest.xml \
               --cov-config /src/fitlins/docker/multiproc.coveragerc \
               --ignore-glob=/src/fitlins/fitlins/tests/* /src/fitlins

      - name: Submit pytest coverage
        uses: codecov/codecov-action@v2
        with:
          directory: /tmp/pytestcov
          env_vars: OS,PYTHON
          files: /tmp/pytestcov/cov_pytest.xml
          name: fitlins
